/* REXX */
/* CLS2REXXed by SBGOLOB on 28 Aug 2003 at 08:34:35  */
/* This REXX requires the CLS2REXX and TSOPROC REXXes on File 646.  */
/* This REXX was converted from the DOCFIL CLIST, with adjustments. */
/* With 4-digit numbers, you have to execute with FLE(@FIL) .       */
Signal On NoValue
Parse source opsys . exec_name .

Parse upper arg argument_list
Call TSOPROC argument_list,,
  'PROC 1 FNUM PREF(SBGOLOB) OUTPU(X) NUMB(503) CBT(CBT) FLE(@FILE)
         DSNM(CBTDOC.PDS)'
Interpret Result
If RC Â¬= 0
  Then
    Do
    Say tsoproc_msg
    Exit RC
    End
/* ------------------------------------------------------------- */
/* CLIST TO FIX COLUMNS 73-80 IN THE CBT DOCUMENTATION, FOR A    */
/* SPECIFIC FILE NUMBER.  DATASET IN WHICH THE MEMBER IS FIXED,  */
/* IS THE STAGING DATASET FOR THAT CBT TAPE FILE.                */
/* ------------------------------------------------------------- */
filver = "CBT"numb
filnam = filver".FILE"fnum
datast = pref"."filnam
vers = substrc(1,1,numb)
modif = substrc(2,3,numb)
Say "ISPF STATS:  VERSION    IS" vers
Say "ISPF STATS:  MODIF LVL  IS" modif
Address TSO "ALLOC F(INPUT)  SH REUSE DA('"datast"("fle||fnum")')"
Address TSO "ALLOC F(OUTPUT) SH REUSE DA('"datast"("outpu")')"
Say "FIXING COLUMNS 73-80 FOR CBTDOC IN MEMBER" fle||fnum
Say "DATASET BEING FIXED:"  datast
Say "OUTPUT MEMBER NAME :"  outpu
Address TSO "CALL 'SBGOLOB.LOAD(DOCFILE)'"
Say "PDS86 BEING CALLED TO RENAME OUTPUT MEMBER"
 line01 = ' AT 'outpu' AD  ID(CBT-'numb') VER('vers') MOD('modif') '
   QUEUE line01
 line02 = ' RENAME 'outpu' 'fle||fnum'  SWAP '
   QUEUE line02
 line03 = ' DELETE 'outpu' '
   QUEUE line03
 line04 = ' END '
   QUEUE line04
Address TSO "PDS86 '"datast"' XISPM"
Say "Current Return Code " rc
Say "MEMBER" fle||fnum "SUCCESSFULLY RENAMED"
Address TSO "FREE FI(INPUT OUTPUT)"
Say "INPUT AND OUTPUT FILES FREED"
Say "DOCFIL EXECUTION COMPLETED WITH RETURN CODE" rc
Exit 0

substrc: Procedure
 If arg(3) = ''
   Then
     Do
     s = Arg(1)
     l = 1
     v = arg(2)
     End
   Else
     Do
     s = arg(1)
     l = arg(2)-arg(1)+1
     v = arg(3)
     End
  Return substr(v,s,l)

