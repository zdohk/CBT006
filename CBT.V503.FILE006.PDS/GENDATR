/* REXX GENDATR*/
/* TO TEST: TSO GENDATR 221R NUMB(503) PREF(GABRIEL)*/
/* OBTAIN MEMBER INFORMATION ABOUT A PDS,
   UPDATE A MEMBER IN THAT PDS NAMED $$$#DATE
   WITH THAT INFORMATION.
   1 PARAMETER REQUIRED TO BE ENTERED ON THE COMMAND LINE:
   FNUM, THE NUMBER OF THE CBT FILE INVOLVED.
   OPTIONAL PARAMETERS THAT MAY BE ENTERED ON THE COMMAND LINE,
   AFTER THE REQUIRED FIRST PARAMETER:
   OUTPUT: THE MEMBER NAME TO BE UPDATED
   NUMB: THE NUMBER OF THE FILE
   FLE: THE LITERAL STRING "FILE"
   PREF: THE HIGH LEVEL QUALIFIER OF THE PDS

   EXAMPLE OF COMMANDS PASSED TO PDS86:
   "PDS86 'GABRIEL.CBT503.FILE221R' XISPM "
   "VER :"
   "END  "

   THEN LATER:
   "PDS86 'GABRIEL.CBT503.FILE221R' XISPM "
   "ATTRIB $$$#DATE  ADDSTATS ID(CBT-503) VER(5) MOD(01)"
   "END"

   WRITTEN BY GABRIEL F. GARGIULO, APRIL 17, 2014
*/

ARG FIRST_PARAMETER REST_OF_PARAMETERS
DEBUG = "YES"                    /* YES OR NO */
CALL GET_INPUT /* PROCESS COMMAND LINE */
VER   = SUBSTR(NUMB, 1, 1)
MODIF = SUBSTR(NUMB, 2, 2)

/* INITIALIZE VARIABLES */
MEMBER_LINE = " " /* SOMETIMES PDS86 DOESN'T PRODUCE THIS LINE */

/* VERIFY DSN */
PDS             = "'"PREF"."CBT""NUMB"."FILE""FNUM"'"
PDS_PLUS_MEMBER = "'"PREF"."CBT""NUMB"."FILE""FNUM"("OUTPUT")'"
IF SYSDSN(PDS) = "OK" THEN NOP
ELSE SIGNAL BAD_DSN

/* CAPTURE OUTPUT OF PDS86, THEN LISTDS, THEN PDS86 AGAIN */
CALL OUTTRAP "PDS86LINE.","*"

/* PUT PDS86 COMMANDS IN STACK. PDS86 WILL READ THEM
   AFTER IT STARTS UP */
"PROFILE MSGID"
QUEUE "VER :"
QUEUE "END"
"PDS86" PDS_PLUS_MEMBER "XISPM"
/*"PDS86 '"PREF"."CBT""NUMB"."FILE""FNUM"("OUTPUT")' XISPM"*/
CALL OUTTRAP "OFF"

CALL OUTTRAP "LISTDLINE.","*"
"LISTDS" PDS
/* "LISTDS '"PREF"."CBT""NUMB"."FILE""FNUM"'" */
CALL OUTTRAP "OFF"
IF DEBUG = "YES" THEN CALL DISPLAY_PDS86LINE_ARRAY
IF DEBUG = "YES" THEN CALL DISPLAY_LISTDLINE_ARRAY

/* PUT SOME LINES INTO A STEM VARIABLE.
   THEY WILL BE WRITTEN LATER TO THE MEMBER

   EXCILINE.0 HAS NUMBER OF LINES IN THE STEM VAR
   WE ARE GOING TO WRITE,
   WE NEED TO COUNT THE LINES,
   AND WHEN WE FINISH ADDING LINES,
   SET EXCILINE.0 TO THE NEW NUMBER OF LINES IN THE STEM VAR
   */
LINE_COUNTER = 0 /* DO THIS ONLY ONCE */

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"REGULAR CBT TAPE - VERSION "NUMB"    FILE:  "FNUM

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
" "

ORIGINAL_DSNAME = LISTDLINE.1
LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"    ORIGINAL DSNAME:  "ORIGINAL_DSNAME

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"    ---------------               "

RECFM_DISPLAY   = LISTDLINE.2
LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"                    "RECFM_DISPLAY /* MAY NEED SUBSTR*/

VB_255_DISPLAY   = LISTDLINE.3
LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"                    "VB_255_DISPLAY/* MAY NEED SUBSTR*/

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
" "

CALL FIND_LINE_WITH_DESIRED_INFO

IF DEBUG = "YES" THEN SAY "MEMBER LINE  RETRIEVED IS" MEMBER_LINE
LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"   "MEMBER_LINE

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
" "

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
" "

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
"TIME THIS PDS WAS SHIPPED:   "DATE(USA)"    "TIME()"    UTC-4:00"

LINE_COUNTER = LINE_COUNTER + 1
EXCILINE.0   = LINE_COUNTER
EXCILINE.LINE_COUNTER =,
" "

CBTSTR = CBT"-"NUMB
IF DEBUG = "YES" THEN SAY "CBTSTR " CBTSTR
QUEUE ,
"PDS86 '"PREF"."CBT""NUMB"."FILE""FNUM"' XISPM"
QUEUE "ATTRIB" OUTPUT " ADDSTATS ID("CBTSTR") VER("VER") MOD("MODIF")"
QUEUE "END"

IF DEBUG = "YES" THEN CALL DISPLAY_EXCILINE_ARRAY
CALL WRITE_TO_FILE
EXIT   /* LOGICAL END OF PROGRAM */

WRITE_TO_FILE:
DATASET_NAME = "'"PREF"."CBT""NUMB"."FILE""FNUM"("OUTPUT")'"
IF DEBUG = "YES" THEN TRACE C
"ALLOCATE DDNAME(OUT) DSNAME("DATASET_NAME") SHR REUSE"
SAY "GOING TO WRITE " EXECILINE.0 " RECORDS"
DO I = 1 TO EXCILINE.0;SAY EXCILINE.I;END I
IF DEBUG = "YES" THEN SAY "GOING TO WRITE " EXCILINE.0 " RECORDS"
"EXECIO " EXCILINE.0 "DISKW OUT (STEM EXCILINE. FINIS)"
IF DEBUG = "YES" THEN SAY "RETURN CODE FROM EXECIO " RC
"FREE     DDNAME(OUT)"
RETURN

GET_INPUT:
/* TRYING TO SIMULATE WHAT CLIST DOES */
/* FNUM IS A CLIST POSITIONAL PARAMETER, NOT OPTIONAL */
IF FIRST_PARAMETER = "" THEN DO
   SAY "ENTER FNUM. 3 DIGIT FILE NUMBER "
   PULL FNUM
   IF FNUM = "" THEN DO
      SAY "NOTHING ENTERED, ENDING"
      EXIT
      END /* NO FNUM SECOND TIME */
   END /* FNUM NOT ENTERED ON COMMAND LINE */
   ELSE DO  /* FIRST_PARAMETER IS NOT BLANK */
      FNUM = FIRST_PARAMETER
      END

/* SET DEFAULTS FOR NON-REQUIRED */
OUTPUT = "$$$#DATE"
NUMB   = 503
CBT    = "CBT"
FLE    = "FILE"
PREF   = "SBGOLOB"

IF POS("OUTPUT(",REST_OF_PARAMETERS) > 0
THEN PARSE UPPER VAR REST_OF_PARAMETERS "OUTPUT("OUTPUT")"

IF POS("NUMB(",REST_OF_PARAMETERS) > 0
THEN PARSE UPPER VAR REST_OF_PARAMETERS "NUMB("NUMB")"

IF POS("CBT(",REST_OF_PARAMETERS) > 0
THEN PARSE UPPER VAR REST_OF_PARAMETERS "CBT("CBT")"

IF POS("FLE(",REST_OF_PARAMETERS) > 0
THEN PARSE UPPER VAR REST_OF_PARAMETERS "FLE("FLE")"

IF POS("PREF(",REST_OF_PARAMETERS) > 0
THEN PARSE UPPER VAR REST_OF_PARAMETERS "PREF("PREF")"
IF DEBUG = "YES" THEN CALL DISPLAY_INPUT
RETURN

DISPLAY_INPUT:
SAY "INPUT RECEIVED FROM COMMAND LINE WAS"
SAY "FNUM   " FNUM
SAY "OUTPUT " OUTPUT
SAY "NUMB   " NUMB
SAY "CBT    " CBT
SAY "FLE    " FLE
SAY "PREF   " PREF
RETURN

BAD_DSN:
SAY "DSN NOT FOUND " PDS
EXIT

FIND_LINE_WITH_DESIRED_INFO:
/* WE DON'T KNOW EXACTLY WHICH LINE #
   THE "MEMBERS COUNTED; CUMULATIVE SIZE" INFO IS ON
   BUT WE KNOW SOME OF THE INFORMATION THAT IS ON THE LINE
   NAMELY: PDS117I  AND CUMULATIVE SIZE
*/
DO J = 1 TO PDS86LINE.0
   IF POS("PDS117I",PDS86LINE.J)         > 0 &,
      POS("CUMULATIVE SIZE",PDS86LINE.J) > 0
         THEN MEMBER_LINE = PDS86LINE.J
END J
RETURN

DISPLAY_PDS86LINE_ARRAY:
DO I = 1 TO PDS86LINE.0
   SAY "TRAPPED PDS86" I PDS86LINE.I
END I
RETURN

DISPLAY_LISTDLINE_ARRAY:
DO I = 1 TO LISTDLINE.0
   SAY "TRAPPED LISTD" I LISTDLINE.I
END I
RETURN

DISPLAY_EXCILINE_ARRAY:
DO I = 1 TO EXCILINE.0
   SAY "FULL ARY  EXECILINE " I EXCILINE.I
END I
RETURN
